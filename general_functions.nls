; probability that the ball goes in is a function of the player's range and the distance to the basket
; relative distance makes the function better scale on the range of a player
; maximal range without defense gives a percentage of .43
to-report probability-score [s-range dist defender-dist max-dist] 
  let relative-distance (dist / s-range) * 2
  let relative-distance2 defender-dist / max-dist
  if defender-dist > max-dist [
    set relative-distance2 max-dist
  ]
  let penalty -1 * relative-distance2 ^ 2 + 1
  report ((relative-distance + 0.98) / (relative-distance ^ 2 + relative-distance + 1) / (penalty + 1))
end

to jump-ball [max-dist]
  ask ball 11 [
    let distX 0 ; have to initialize
    let distY 0

    ifelse random 2 = 1 [
      set distX (random-float max-dist) + 4
    ][ set distX -1 * (random-float max-dist) - 4 ]

    ifelse random 2 = 1 [
      set distY (random-float max-dist) + 4
    ][ set distY -1 * (random-float max-dist) - 4 ]

    setxy xcor + distX ycor + distY
  ]
end


to inbound [team-that-scored]
  ifelse team-that-scored = "lakers" [
    ask player random 5 [
      setxy height + 1 10
    ]
    ask ball 11 [
      setxy height + 0.5 10 
    ]
  ][
    ask player ((random 5) + 5) [
      setxy -1 * height - 1 10 
    ]
    ask ball 11 [
      setxy -1 * height - 0.5 10 
    ]
  ]
end

to bounce-off-rim [team-that-missed max-dist]
  ask ball 11 [
    let distX 0
    let distY 0
    
    while [abs distX + abs distY < 3] [ ; make sure the ball bounces far enough
      ifelse random 2 = 1 [
        set distY random-float max-dist
      ][
        set distY -1 * (random-float max-dist)
      ]
        
      ifelse team-that-missed = "lakers" [
        set distX -1 * (random-float max-dist)
      ][
        set distX random-float max-dist
      ]
    ]
    
    setxy xcor + distX ycor + distY
  ]
end

to-report offense-spot [team-player]
  let x 0
  let y 0
  ifelse random 2 = 1 [
    set y random width
  ][
    set y -1 * (random width)
  ]
    
  ifelse team-player = "lakers" [
    set x random height
  ][
    set x -1 * (random height)
  ]
  
  report list x y
end

to-report paint-spot [team-player]
  let x 0
  let y 0
  ifelse team-player = "lakers" [
    set x -1 * height + 15
  ][
    set x height - 15
  ]
  
  report list x y
end

to update-possessions
  ask ball 11 [
    if ([team] of ([owner] of ball 11) = "lakers") and ([team] of ([prev-owner] of ball 11) != "lakers")[
      set possessions-lakers possessions-lakers + 1
    ]
    if ([team] of ([owner] of ball 11) = "celtics") and ([team] of ([prev-owner] of ball 11) != "celtics")[
      set possessions-celtics possessions-celtics + 1
    ]
  ]
end

to pass-position [x y dist]
  ask ball 11 [
    ifelse random-float 1 < passing-prob [
      setxy x y
    ][
      set loose-ball? true
      set x random-float dist
      set y random-float dist
      if random 2 = 1 [
        set x -1 * x
      ]
      if random 2 = 1 [
        set y -1 * y 
      ]
      
      setxy x y
    ]
  ]
end